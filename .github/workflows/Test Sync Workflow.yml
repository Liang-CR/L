# 工作流名称，在 GitHub Actions 页面中显示
name: Smart Upstream Sync xxx

# 权限配置，允许 GitHub Actions 推送代码
permissions:
  contents: write

# 触发条件：
# - 每 5 分钟自动执行一次（UTC 时间）
# - 也可以手动触发
on:
  schedule:
    - cron: "*/5 * * * *"  # 每 5 分钟检查一次（根据需要调整频率）
  workflow_dispatch:       # 允许手动触发工作流

jobs:
  sync:
    # 单个 Job 名称，在 Actions 页面显示
    name: Sync from LibreSpark/LibreTV
    # 运行环境：使用最新的 Ubuntu 作为执行环境
    runs-on: ubuntu-latest

    steps:
      # 步骤 1：检出你的代码仓库
      - name: Checkout your repo
        uses: actions/checkout@v3  # 使用 GitHub Actions 官方的检出动作

      # 步骤 2：设置 Git 用户身份
      # 用于 Git 提交时标识作者为 GitHub Actions 自动创建的 bot
      - name: Set Git identity
        run: |
          git config user.name "github-actions[bot]"  # 设置用户名
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"  # 设置用户邮箱

      # 步骤 3：添加上游仓库并拉取（fetch）上游的最新代码
      - name: Add upstream and fetch
        run: |
          git remote add upstream https://github.com/LibreSpark/LibreTV.git  # 添加上游仓库
          git fetch upstream  # 获取上游仓库的更新

      # 步骤 4：检查本地分支和上游分支的提交是否一致
      # 比较本地仓库（当前分支）和上游仓库的 main 分支提交哈希
      # 只有在本地和上游提交哈希不一致时才认为有更新
      - name: Check for upstream updates
        id: check
        run: |
          LOCAL_HASH=$(git rev-parse HEAD)  # 获取本地仓库当前分支的最新提交哈希
          UPSTREAM_HASH=$(git rev-parse upstream/main)  # 获取上游仓库 main 分支的最新提交哈希
          echo "local=$LOCAL_HASH" >> $GITHUB_OUTPUT  # 输出本地哈希
          echo "upstream=$UPSTREAM_HASH" >> $GITHUB_OUTPUT  # 输出上游哈希
          if [ "$LOCAL_HASH" != "$UPSTREAM_HASH" ]; then  # 判断本地和上游哈希是否一致
            echo "has_updates=true" >> $GITHUB_OUTPUT  # 如果不同，表示有更新
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT  # 如果相同，表示没有更新
          fi

      # 步骤 5：如果有更新，则执行合并操作并推送到远程仓库
      # 只有在上游有更新时才会执行合并和推送
      - name: Merge and push if updated
        if: steps.check.outputs.has_updates == 'true'  # 如果有更新，则执行下一步
        run: |
          git merge upstream/main --strategy-option theirs --allow-unrelated-histories --no-edit || true  # 强制合并
          git push origin main  # 推送合并后的代码到远程仓库（你的 Fork）

