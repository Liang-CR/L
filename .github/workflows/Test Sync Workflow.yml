name: Smart Upstream Sync xxx

# 权限配置，允许 GitHub Actions 推送代码
permissions:
  contents: write    # 允许推送代码
  workflows: write   # 允许修改工作流文件

# 触发方式：
on:
  schedule:
    - cron: "*/5 * * * *"  # 每 5 分钟执行一次
  workflow_dispatch:       # 允许手动触发工作流

jobs:
  sync:
    name: Sync from LibreSpark/LibreTV
    runs-on: ubuntu-latest

    steps:
      # 步骤 1：检出你的代码仓库
      - name: Checkout your repo
        uses: actions/checkout@v3

      # 步骤 2：设置 Git 用户身份（用于自动提交）
      - name: Set Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # 步骤 3：添加上游仓库并拉取更新
      - name: Add upstream and fetch
        run: |
          git remote add upstream https://github.com/LibreSpark/LibreTV.git
          git fetch upstream

      # 步骤 4：检查本地分支和上游分支的提交是否一致
      # 比较本地仓库（当前分支）和上游仓库的 main 分支提交哈希
      # 只有在本地和上游提交哈希不一致时才认为有更新
      - name: Check for upstream updates
        id: check
        run: |
          LOCAL_HASH=$(git rev-parse HEAD)
          UPSTREAM_HASH=$(git rev-parse upstream/main)
          echo "local=$LOCAL_HASH" >> $GITHUB_OUTPUT
          echo "upstream=$UPSTREAM_HASH" >> $GITHUB_OUTPUT
          if [ "$LOCAL_HASH" != "$UPSTREAM_HASH" ]; then  # 判断有无更新
            echo "has_updates=true" >> $GITHUB_OUTPUT
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      # 步骤 5：如果有更新，则执行合并操作并推送到远程仓库
      # 只有在上游有更新时才会执行合并和推送
      - name: Merge and push if updated
        if: steps.check.outputs.has_updates == 'true'
        run: |
          git merge upstream/main --strategy-option theirs --allow-unrelated-histories --no-edit || true
          git push origin main
